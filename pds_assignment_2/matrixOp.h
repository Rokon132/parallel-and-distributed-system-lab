/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _MATRIXOP_H_RPCGEN
#define _MATRIXOP_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAX_MATRIX_ELEMENTS 400
#define ERROR_MESSAGE_LEN 256

struct matrix {
	u_int rows;
	u_int cols;
	struct {
		u_int data_len;
		double *data_val;
	} data;
};
typedef struct matrix matrix;

struct matrix_pair {
	matrix a;
	matrix b;
};
typedef struct matrix_pair matrix_pair;

struct matrix_result {
	int status;
	matrix value;
	char *message;
};
typedef struct matrix_result matrix_result;

#define MATRIX_OP_PROG 0x31234567
#define MATRIX_OP_V1 1

#if defined(__STDC__) || defined(__cplusplus)
#define MATRIX_ADD 1
extern  matrix_result * matrix_add_1(matrix_pair *, CLIENT *);
extern  matrix_result * matrix_add_1_svc(matrix_pair *, struct svc_req *);
#define MATRIX_MULTIPLY 2
extern  matrix_result * matrix_multiply_1(matrix_pair *, CLIENT *);
extern  matrix_result * matrix_multiply_1_svc(matrix_pair *, struct svc_req *);
#define MATRIX_TRANSPOSE 3
extern  matrix_result * matrix_transpose_1(matrix *, CLIENT *);
extern  matrix_result * matrix_transpose_1_svc(matrix *, struct svc_req *);
#define MATRIX_INVERSE 4
extern  matrix_result * matrix_inverse_1(matrix *, CLIENT *);
extern  matrix_result * matrix_inverse_1_svc(matrix *, struct svc_req *);
extern int matrix_op_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define MATRIX_ADD 1
extern  matrix_result * matrix_add_1();
extern  matrix_result * matrix_add_1_svc();
#define MATRIX_MULTIPLY 2
extern  matrix_result * matrix_multiply_1();
extern  matrix_result * matrix_multiply_1_svc();
#define MATRIX_TRANSPOSE 3
extern  matrix_result * matrix_transpose_1();
extern  matrix_result * matrix_transpose_1_svc();
#define MATRIX_INVERSE 4
extern  matrix_result * matrix_inverse_1();
extern  matrix_result * matrix_inverse_1_svc();
extern int matrix_op_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_matrix (XDR *, matrix*);
extern  bool_t xdr_matrix_pair (XDR *, matrix_pair*);
extern  bool_t xdr_matrix_result (XDR *, matrix_result*);

#else /* K&R C */
extern bool_t xdr_matrix ();
extern bool_t xdr_matrix_pair ();
extern bool_t xdr_matrix_result ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_MATRIXOP_H_RPCGEN */
